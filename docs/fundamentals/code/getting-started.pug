---
title: Getting started
order: 1
layout: page.pug
---
  
aside.callout
  h2.callout__heading Feedback appreciated!
  p.paragraph
    | The Web Style Guide aims to support you in building awesome
    | responsive web sites and apps. If you struggle using the assets, 
    | miss a component or face any other issue please feel free to
    = ' '
    a(href=config.repository.url, title=config.repository.name).link file an issue on github
    |  or 
    a(data-uv-trigger, data-uv-mode="contact").link use the feedback form
    | .

:markdown-it
  # Get the Web Style Guide

  ## Use npm

  Our recommended way to integrate the Web Style Guide into a project is to
  use npm.

  ```bash
  npm install @axa-ch/style-guide
  ```

  ## Direct download
  
  If you don't need the Web Style Guide
  as a versioned project dependency check out
  our [GitHub releases page](https://github.com/axa-ch/style-guide/releases).

  ## Use bower

  We haven't published to bower, yet. But you can get the dependency using
  the URL to the repository.

  ```bash
  bower install https://github.com/axa-ch/style-guide.git
  ```

  # What's included

dl
  dt css
  dd.
    The precompiled CSS assets for `style.scss` and `normalize.scss`.
    We recommend using the SCSS assets to maintain configurability
    (see customization section below).

  dt docs
  dd A copy of the docs you're currently reading.

  dt fonts
  dd.
    Here you'll find the icon font used within the web design guide
    in various formats.

  dt images
  dd.
    Contains all image assets used by the web design guide.

  dt jquery
  dd.
    Compiled (from CoffeeScript) and optionally minified jQuery plugins.

  dt scss
  dd.
    The raw Sass files you can use to compile your custom CSS assets.

:markdown-it
  <div class="l-row" >
    <div class="l-half" >
      <h3 class="heading heading--tertiary" >npm package</h3>
      <pre class="highlight"><code class="highlight__listing hljs ">axa-web-design-guide/
  ├── dist/
  │   ├── scss/
  │   ├── js/
  │   ├── images/
  │   ├── fonts/
  │   ├── docs/
  │   └── css/
  ├── README.md
  ├── package.json
  ├── LICENSE.md
  └── .npmignore</code></pre>
    </div>
    <div class="l-half" >
      <h3 class="heading heading--tertiary" >direct download & bower package</h3>
      <pre class="highlight"><code class="highlight__listing hljs ">axa-web-design-guide/
  ├── scss/
  ├── js/
  ├── images/
  ├── fonts/
  ├── docs/
  │── css/
  ├── README.md
  ├── LICENSE.md
  └── bower.json</code></pre>
    </div>
  </div>
          
  # Using the Web Style Guide

  ## Basic template

  ```html
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>AXA Web Style Guide - Basic template</title>

      <!-- meta tags as explained in the recommendations page -->
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0">

      <!-- add polyfills, SEO and Social metadata tags here -->

      <!-- include the procided style.min.css or your own css assets -->
      <link href="css/style.min.css" rel="stylesheet">
    </head>
    <body>
      <h1>Hello, world!</h1>

      <!-- optional: add jQuery plugins -->
      <script src="libs/jquery/1.11.1/jquery.min.js"></script>
      <script src="libs/moment.js/2.9.0/moment.js"></script>
      <script src="js/style.all.min.js"></script>

    </body>
  </html>
  ```

  Please have a look at the following pages for optimization.

  - [Browser support](/fundamentals/code/browser-support.html)
  - [FAQ](/fundamentals/code/faq.html)
  <!--- [Search Engine Optimisation (SEO)](/fundamentals/code/seo.html)-->
  <!--- [Social metadata](/fundamentals/code/social-metadata.html)-->

  # SCSS/CSS

  You can either use the CSS files provided in the packages or compile the Sass
  assets on your own.

  ## Using the CSS files

  We do not recommend using the precompiled CSS files in a productive
  environment since you can't configure anything and need to add the
  whole bloat of CSS even if you just need a tiny bit.

  To use the precompiled CSS files just reference them from your HTML
  (see the tempalte above).

  When using the CSS files make sure that the assets referenced from the
  CSS files (e.g. images at `../images`) are available.

  ## Compiling the Sass files on your own

  Compiling the Sass files is the recommended approach since you gain
  control over paths and what to include or not.

  - Inculde the blocks you need and omit those you don't need
  - Customize Sass variables
  - Use custom post processing

  ### Basic Sass template

  <p class="callout" >
    The following examples assume that you have added the
    `scss/` folder of the Web Style Guide to the Sass compilers
    paths.
  </p>

  #### Including needed elements only

  `normalize` and `basics` are the only `@import`s required. Add other
  `@import`s as needed.
  
  ```scss
  // required
  @import 'normalize';
  @import 'style/basics';

  // add utils, grid and blocks as needed
  @import 'style/utils';
  @import 'style/grid';

  @import 'style/blocks/header';
  @import 'style/blocks/footer';
  ```

  #### Including the entire Web Style Guide

  This approach may be used for prototyping but it is not recommended
  in a productive setup since it will add a lot of CSS markup you don't need.

  ```scss
  @import 'normalize';
  @import 'style';
  ```

  ### Sass variables

  Have a look at the well commented `scss/variables.scss` file to see what
  variables you can override.

  ### Post processing

  Add
  [autorefixer](https://github.com/postcss/autoprefixer) and
  [pseudoelements](https://www.npmjs.com/package/postcss-pseudoelements)
  to your build to make
  the css output work in older browsers.

  Don't forget to minify your CSS, by first combining your media queries with
  [css-mqpacker](https://github.com/hail2u/node-css-mqpacker)
  and then mangle you CSS with [CSSWring](https://github.com/hail2u/node-csswring)
  or [cssnano](https://github.com/ben-eb/cssnano).

  Have a look at the
  [postcss plugin list](https://github.com/postcss/postcss#plugins)
  for further processing.

  # jQuery plugins

  Use the jQuery plugins to give your app some interactivity. Note that
  these plugins are an early draft and every contribution is highly
  appreciated.

   You can include each plugin individually or the
   `axa-wsg.jquery.all(.min).js` to get them all.

//- Copyright AXA Versicherungen AG 2015
