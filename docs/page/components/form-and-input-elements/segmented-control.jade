---
title: Segmented Control
order: 10
template: page.jade
tags: Single select, selection
---

include ../includes/mixins.jade

p.paragraph.
  A segmented control enables the user to make a single
  selection from just a few options.

.toc
  .toc__title Table of contents
  ul.toc__anchor-navigation
    li.toc__anchor-navigation__item
      a(href='#basic').toc__anchor-navigation__link Basic Segmented Control
    li.toc__anchor-navigation__item
      a(href='#stacked').toc__anchor-navigation__link Stacked Segmented Control
    li.toc__anchor-navigation__item
      a(href='#disabled').toc__anchor-navigation__link Disabled Segmented Control
    li.toc__anchor-navigation__item
      a(href='#backup').toc__anchor-navigation__link Backup: Radio Buttons

h2.heading.heading--secondary#basic Basic Segmented Control

p.paragraph.
  This element aligns different options next to each other.

+example('/components/form-and-input-elements/demos/segmented-control-basic.html')

.toggle
  .toggle__button(data-info, data-target='#code-basic')
    +svg('source', ['icon', 'toggle__icon'])
    span See code
  .toggle__content#code-basic
    .tab-panel(data-tab, data-tab-default='html')
      .tab-panel__header
        .tab-panel__header__tabs
          .tab-panel__header__tab(data-tab-toggle='html') HTML
          .tab-panel__header__tab(data-tab-toggle='js') JavaScript
      .tab-panel__content
        .tab-panel__content__tab(data-tab-content='html')
          :markdown
            The ``segmented-control--js`` modifier will
            add custom styling to radio buttons to look
            like a segmented-control.
            The `segmented-control` plugin does that
            automatically. It also sets the
            `.is-active` state on the active item.
          .tab-panel__content__tab__fullwidth-content
            .highlight: pre.highlight__listing.hljs: code.js
              include:highlightcode ./snippets/segmented-control-basic.jade
        .tab-panel__content__tab(data-tab-content='js')
          :markdown
            If you can't use the jQuery plugin, use the
            `segmented-control--js` modifier for styling.
            Set the `.is-active` state on the correct
            `segmented-control__item` and be sure to
            **handle keyboard navigation.**


h3.heading.heading--tertiary UX Checklist
ul.checklist
  li.checklist__item
    +svg('checkmark', ['checklist__item__icon', 'icon'])
    .checklist__item__content.
      Default values can be set if appropriate - if in doubt, do not set defaults.
  li.checklist__item
    +svg('checkmark', ['checklist__item__icon', 'icon'])
    .checklist__item__content
      :markdown
        Do not use more than 5 options in a segmented control. A <a href="./dropdown.html" class="link">dropdown</a> can be an alternative.

.hr

h2.heading.heading--secondary#stacked Stacked Segmented Control

p.paragraph.
  A stacked segmented control is used when text gets to long to be presented next to each other. If you are using the Segmented Control jQuery Plugin, this will be automatically handled for you.

+example('/components/form-and-input-elements/demos/segmented-control-stacked.html')

.toggle
  .toggle__button(data-info, data-target='#code-stacked')
    +svg('source', ['icon', 'toggle__icon'])
    span See code
  .toggle__content#code-stacked
    .tab-panel(data-tab, data-tab-default='html')
      .tab-panel__header
        .tab-panel__header__tabs
          .tab-panel__header__tab(data-tab-toggle='html') HTML
      .tab-panel__content
        .tab-panel__content__tab(data-tab-content='html')
          :markdown
            Add the `segmented-control--stacked` modifier
            to create stacked segmented-controls.
            The jQuery plugin will do that automatically
            if there's not enough space.
          .tab-panel__content__tab__fullwidth-content
            .highlight: pre.highlight__listing.hljs: code.js
              include:highlightcode ./snippets/segmented-control-stacked.jade

h3.heading.heading--tertiary UX Checklist

ul.checklist
  li.checklist__item
    +svg('checkmark', ['checklist__item__icon', 'icon'])
    .checklist__item__content.
      Do not set a default value when using a stacked segmented control.

.hr

h2.heading.heading--secondary#disabled Disabled Segmented Control

p.paragraph.
  A disabled segmented control can be used to show a value that can't be modified.

+example('/components/form-and-input-elements/demos/segmented-control-disabled.html')

.toggle
  .toggle__button(data-info, data-target='#code-disabled')
    svg.icon.toggle__icon
      use(xlink:href=relative('/images/icons.svg#source'))
    span See code
  .toggle__content#code-disabled
    .tab-panel(data-tab, data-tab-default='html')
      .tab-panel__header
        .tab-panel__header__tabs
          .tab-panel__header__tab(data-tab-toggle='html') HTML
      .tab-panel__content
        .tab-panel__content__tab(data-tab-content='html')
          :markdown
            Add the `disabled="disabled"` property
            to the segmented-control to make it disabled.
          .tab-panel__content__tab__fullwidth-content
            .highlight: pre.highlight__listing.hljs: code.js
              include:highlightcode ./snippets/segmented-control-disabled.jade
.hr

h2.heading.heading--secondary#backup Backup: Radio Buttons

p.paragraph.
  If presented with problems, the user should always be able to use the browser native radio buttons as a fallback solution.

+example('/components/form-and-input-elements/demos/segmented-control-fallback.html')

.toggle
  .toggle__button(data-info, data-target='#code-fallback')
    +svg('source', ['icon', 'toggle__icon'])
    span See code
  .toggle__content#code-fallback
    .tab-panel(data-tab, data-tab-default='html')
      .tab-panel__header
        .tab-panel__header__tabs
          .tab-panel__header__tab(data-tab-toggle='html') HTML
      .tab-panel__content
        .tab-panel__content__tab(data-tab-content='html')
          :markdown
            Use the same markup to create standard radio
            buttons. Just omit the jQuery plugin and the
            `segmented-control--js` modifier.
          .tab-panel__content__tab__fullwidth-content
            .highlight: pre.highlight__listing.hljs: code.js
              include:highlightcode ./snippets/segmented-control-fallback.jade

//- Copyright AXA Versicherungen AG 2015
